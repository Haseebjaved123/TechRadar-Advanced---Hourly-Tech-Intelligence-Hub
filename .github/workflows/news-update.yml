name: 🚀 TechRadar Advanced - Hourly News Update

on:
  schedule:
    # Run every hour at minute 0
    - cron: '0 * * * *'
  workflow_dispatch:
    inputs:
      test_mode:
        description: 'Run in test mode (no actual commits)'
        required: false
        default: 'false'
        type: boolean

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  fetch-and-process-news:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 📦 Install Python Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: 🔧 Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: 🚀 Run Complete Update Pipeline
      run: |
        python scripts/auto_update.py
      env:
        NEWS_API_KEY: ${{ secrets.NEWS_API_KEY }}
        REDDIT_CLIENT_ID: ${{ secrets.REDDIT_CLIENT_ID }}
        REDDIT_CLIENT_SECRET: ${{ secrets.REDDIT_CLIENT_SECRET }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: 🔍 Check for Changes
      id: check-changes
      run: |
        if [ -n "$(git status --porcelain)" ]; then
          echo "changes=true" >> $GITHUB_OUTPUT
        else
          echo "changes=false" >> $GITHUB_OUTPUT
        fi

    - name: 📤 Commit and Push Changes
      if: steps.check-changes.outputs.changes == 'true' && github.event.inputs.test_mode != 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Get current timestamp
        TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
        HOUR=$(date -u +"%H")
        
        # Create commit message
        COMMIT_MSG="🚀 Auto-update: TechRadar Advanced - $TIMESTAMP"
        
        # Add all changes
        git add .
        
        # Commit with timestamp (allow empty commits)
        git commit -m "$COMMIT_MSG" || echo "No changes to commit"
        
        # Push to main branch with retry
        for i in {1..3}; do
          if git push origin main; then
            echo "Push successful"
            break
          else
            echo "Push attempt $i failed, retrying in 10 seconds..."
            sleep 10
            git pull origin main --rebase || true
          fi
        done

    - name: 📊 Update Status Badge
      if: steps.check-changes.outputs.changes == 'true' && github.event.inputs.test_mode != 'true'
      run: |
        # Update the last update time in README
        CURRENT_TIME=$(date -u +"%B %d, %Y - %H:00 UTC")
        sed -i "s/Last Update.*/Last Update: $CURRENT_TIME/" README.md
        
        # Commit the status update
        git add README.md
        git commit -m "📊 Update status: $CURRENT_TIME" || echo "No status changes to commit"
        git push origin main || echo "Status update push failed, continuing..."

    - name: 🎯 Create Archive Entry
      if: steps.check-changes.outputs.changes == 'true' && github.event.inputs.test_mode != 'true'
      run: |
        # Create today's archive directory if it doesn't exist
        TODAY=$(date -u +"%Y/%m/%d")
        HOUR=$(date -u +"%H")
        mkdir -p "archives/$TODAY"
        
        # Copy latest.md to archive if it exists
        if [ -f "today/latest.md" ]; then
          cp today/latest.md "archives/$TODAY/$HOUR-00.md"
          
          # Commit archive
          git add "archives/$TODAY/$HOUR-00.md"
          git commit -m "📁 Archive: $TODAY $HOUR:00" || echo "No archive changes to commit"
          git push origin main || echo "Archive push failed, continuing..."
        else
          echo "No latest.md file to archive"
        fi

    - name: 📧 Send Notification (Optional)
      if: steps.check-changes.outputs.changes == 'true' && github.event.inputs.test_mode != 'true'
      run: |
        echo "✅ TechRadar Advanced updated successfully at $(date -u)"
        # Add webhook notification here if needed
        # curl -X POST -H 'Content-type: application/json' \
        #   --data '{"text":"🚀 TechRadar Advanced updated!"}' \
        #   ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: 🧹 Cleanup
      if: always()
      run: |
        echo "🧹 Cleaning up temporary files..."
        # Remove any temporary files created during the process
        find . -name "*.tmp" -delete || true

  # Optional: Run tests on the generated content
  validate-content:
    runs-on: ubuntu-latest
    needs: fetch-and-process-news
    if: always()
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: ✅ Validate Content
      run: |
        python scripts/validate_content.py

    - name: 🔍 Check JSON Syntax
      run: |
        python -m json.tool today/trending.json > /dev/null
        echo "✅ JSON syntax is valid"

    - name: 📊 Generate Report
      run: |
        python scripts/generate_report.py
